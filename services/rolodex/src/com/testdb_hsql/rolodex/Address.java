/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import javax.persistence.PrimaryKeyJoinColumn;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.util.Arrays;
import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;

/**
 * Address generated by hbm2java
 */
@Entity
@Table(name = "ADDRESS", schema = "PUBLIC")
public class Address implements java.io.Serializable {

    private Integer addressId;

    private String address;

    private String address2;

    private String district;

    private String postalCode;

    private String phone;

    private City city;

    private Set<Store> stores = new HashSet<Store>(0);

    private Set<Customer> customers = new HashSet<Customer>(0);

    private Integer cityId;

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ADDRESS_ID", nullable = false)
    public Integer getAddressId() {
        return this.addressId;
    }

    public void setAddressId(Integer addressId) {
        this.addressId = addressId;
    }

    @Column(name = "ADDRESS", nullable = false, length = 50)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "ADDRESS2", length = 50)
    public String getAddress2() {
        return this.address2;
    }

    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    @Column(name = "DISTRICT", nullable = false, length = 20)
    public String getDistrict() {
        return this.district;
    }

    public void setDistrict(String district) {
        this.district = district;
    }

    @Column(name = "POSTAL_CODE", length = 10)
    public String getPostalCode() {
        return this.postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    @Column(name = "PHONE", nullable = false, length = 20)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "CITY_ID", insertable = false, updatable = false)
    public City getCity() {
        return this.city;
    }

    public void setCity(City city) {
        if (city != null) {
            this.setCityId(city.getCityId());
        }
        this.city = city;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = { CascadeType.ALL }, mappedBy = "address")
    public Set<Store> getStores() {
        return this.stores;
    }

    public void setStores(Set<Store> stores) {
        this.stores = stores;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = { CascadeType.ALL }, mappedBy = "address")
    public Set<Customer> getCustomers() {
        return this.customers;
    }

    public void setCustomers(Set<Customer> customers) {
        this.customers = customers;
    }

    @Column(name = "`CITY_ID`", nullable = true, precision = 19, scale = 0)
    public Integer getCityId() {
        return this.cityId;
    }

    public void setCityId(Integer cityId) {
        this.cityId = cityId;
    }

    public Address() {
    }

    public boolean equals(Object o) {
        if (this == o)
            return true;
        if ((o == null))
            return false;
        if (!(o instanceof Address))
            return false;
        Address that = (Address) o;
        return ((this.getAddressId() == that.getAddressId()) || (this.getAddressId() != null && that.getAddressId() != null && this.getAddressId().equals(that.getAddressId())));
    }

    public int hashCode() {
        int result = 17;
        result = 37 * result + (getAddressId() == null ? 0 : this.getAddressId().hashCode());
        return result;
    }
}
