/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testdb_hsql.rolodex.service.FilmActorService;
import com.testdb_hsql.rolodex.service.FilmService;
import com.testdb_hsql.rolodex.service.InventoryService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.testdb_hsql.rolodex.*;
import com.testdb_hsql.rolodex.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Film.
 * @see com.testdb_hsql.rolodex.Film
 */
@RestController(value = "Rolodex.FilmController")
@RequestMapping("/rolodex/Film")
@Api(description = "Exposes APIs to work with Film resource.", value = "FilmController")
public class FilmController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmController.class);

    @Autowired
    @Qualifier("rolodex.FilmService")
    private FilmService filmService;

    @Autowired
    @Qualifier("rolodex.FilmActorService")
    private FilmActorService filmActorService;

    @Autowired
    @Qualifier("rolodex.InventoryService")
    private InventoryService inventoryService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Film instances matching the search criteria.")
    public Page<Film> findFilms(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Films list");
        return filmService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Film instances.")
    public Page<Film> getFilms(Pageable pageable) {
        LOGGER.debug("Rendering Films list");
        return filmService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/inventories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inventories instance associated with the given id.")
    public Page<Inventory> findAssociatedinventories(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated inventories");
        return inventoryService.findAssociatedValues(id, "film", "filmId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/filmActors", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the filmActors instance associated with the given id.")
    public Page<FilmActor> findAssociatedfilmActors(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated filmActors");
        return filmActorService.findAssociatedValues(id, "film", "filmId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setFilmService(FilmService service) {
        this.filmService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Film instance.")
    public Film createFilm(@RequestBody Film instance) {
        LOGGER.debug("Create Film with information: {}", instance);
        instance = filmService.create(instance);
        LOGGER.debug("Created Film with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Film instances.")
    public Long countAllFilms() {
        LOGGER.debug("counting Films");
        Long count = filmService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Film instance associated with the given id.")
    public Film getFilm(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Film with id: {}", id);
        Film instance = filmService.findById(id);
        LOGGER.debug("Film details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Film instance associated with the given id.")
    public Film editFilm(@PathVariable(value = "id") Integer id, @RequestBody Film instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Film with id: {}", instance.getFilmId());
        instance.setFilmId(id);
        instance = filmService.update(instance);
        LOGGER.debug("Film details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Film instance associated with the given id.")
    public boolean deleteFilm(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Film with id: {}", id);
        Film deleted = filmService.delete(id);
        return deleted != null;
    }
}
