/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testdb_hsql.rolodex.service.FilmActorService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.testdb_hsql.rolodex.*;
import com.testdb_hsql.rolodex.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class FilmActor.
 * @see com.testdb_hsql.rolodex.FilmActor
 */
@RestController(value = "Rolodex.FilmActorController")
@RequestMapping("/rolodex/FilmActor")
@Api(description = "Exposes APIs to work with FilmActor resource.", value = "FilmActorController")
public class FilmActorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmActorController.class);

    @Autowired
    @Qualifier("rolodex.FilmActorService")
    private FilmActorService filmActorService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of FilmActor instances matching the search criteria.")
    public Page<FilmActor> findFilmActors(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FilmActors list");
        return filmActorService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of FilmActor instances.")
    public Page<FilmActor> getFilmActors(Pageable pageable) {
        LOGGER.debug("Rendering FilmActors list");
        return filmActorService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setFilmActorService(FilmActorService service) {
        this.filmActorService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new FilmActor instance.")
    public FilmActor createFilmActor(@RequestBody FilmActor instance) {
        LOGGER.debug("Create FilmActor with information: {}", instance);
        instance = filmActorService.create(instance);
        LOGGER.debug("Created FilmActor with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the FilmActor instance associated with the given composite-id.")
    public FilmActor getFilmActor(@RequestParam(value = "actorId", required = true) Integer actorId, @RequestParam(value = "filmId", required = true) Integer filmId) throws EntityNotFoundException {
        FilmActorId temp = new FilmActorId();
        temp.setActorId(actorId);
        temp.setFilmId(filmId);
        LOGGER.debug("Getting FilmActor with id: {}", temp);
        FilmActor instance = filmActorService.findById(temp);
        LOGGER.debug("FilmActor details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the FilmActor instance associated with the given composite-id.")
    public FilmActor editFilmActor(@RequestParam(value = "actorId", required = true) Integer actorId, @RequestParam(value = "filmId", required = true) Integer filmId, @RequestBody FilmActor instance) throws EntityNotFoundException {
        FilmActorId temp = new FilmActorId();
        temp.setActorId(actorId);
        temp.setFilmId(filmId);
        filmActorService.delete(temp);
        instance = filmActorService.create(instance);
        LOGGER.debug("FilmActor details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the FilmActor instance associated with the given composite-id.")
    public boolean deleteFilmActor(@RequestParam(value = "actorId", required = true) Integer actorId, @RequestParam(value = "filmId", required = true) Integer filmId) throws EntityNotFoundException {
        FilmActorId temp = new FilmActorId();
        temp.setActorId(actorId);
        temp.setFilmId(filmId);
        LOGGER.debug("Deleting FilmActor with id: {}", temp);
        FilmActor deleted = filmActorService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of FilmActor instances.")
    public Long countAllFilmActors() {
        LOGGER.debug("counting FilmActors");
        Long count = filmActorService.countAll();
        return count;
    }
}
