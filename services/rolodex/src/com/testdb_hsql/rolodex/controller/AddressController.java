/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testdb_hsql.rolodex.service.AddressService;
import com.testdb_hsql.rolodex.service.CustomerService;
import com.testdb_hsql.rolodex.service.StoreService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.testdb_hsql.rolodex.*;
import com.testdb_hsql.rolodex.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Address.
 * @see com.testdb_hsql.rolodex.Address
 */
@RestController(value = "Rolodex.AddressController")
@RequestMapping("/rolodex/Address")
@Api(description = "Exposes APIs to work with Address resource.", value = "AddressController")
public class AddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddressController.class);

    @Autowired
    @Qualifier("rolodex.AddressService")
    private AddressService addressService;

    @Autowired
    @Qualifier("rolodex.CustomerService")
    private CustomerService customerService;

    @Autowired
    @Qualifier("rolodex.StoreService")
    private StoreService storeService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Address instances matching the search criteria.")
    public Page<Address> findAddresss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Addresss list");
        return addressService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Address instances.")
    public Page<Address> getAddresss(Pageable pageable) {
        LOGGER.debug("Rendering Addresss list");
        return addressService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/customers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the customers instance associated with the given id.")
    public Page<Customer> findAssociatedcustomers(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated customers");
        return customerService.findAssociatedValues(id, "address", "addressId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/stores", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the stores instance associated with the given id.")
    public Page<Store> findAssociatedstores(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated stores");
        return storeService.findAssociatedValues(id, "address", "addressId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAddressService(AddressService service) {
        this.addressService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Address instance.")
    public Address createAddress(@RequestBody Address instance) {
        LOGGER.debug("Create Address with information: {}", instance);
        instance = addressService.create(instance);
        LOGGER.debug("Created Address with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Address instances.")
    public Long countAllAddresss() {
        LOGGER.debug("counting Addresss");
        Long count = addressService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Address instance associated with the given id.")
    public Address getAddress(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Address with id: {}", id);
        Address instance = addressService.findById(id);
        LOGGER.debug("Address details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Address instance associated with the given id.")
    public Address editAddress(@PathVariable(value = "id") Integer id, @RequestBody Address instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Address with id: {}", instance.getAddressId());
        instance.setAddressId(id);
        instance = addressService.update(instance);
        LOGGER.debug("Address details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Address instance associated with the given id.")
    public boolean deleteAddress(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Address with id: {}", id);
        Address deleted = addressService.delete(id);
        return deleted != null;
    }
}
