/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testdb_hsql.rolodex.service.ActorService;
import com.testdb_hsql.rolodex.service.FilmActorService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.testdb_hsql.rolodex.*;
import com.testdb_hsql.rolodex.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Actor.
 * @see com.testdb_hsql.rolodex.Actor
 */
@RestController(value = "Rolodex.ActorController")
@RequestMapping("/rolodex/Actor")
@Api(description = "Exposes APIs to work with Actor resource.", value = "ActorController")
public class ActorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActorController.class);

    @Autowired
    @Qualifier("rolodex.ActorService")
    private ActorService actorService;

    @Autowired
    @Qualifier("rolodex.FilmActorService")
    private FilmActorService filmActorService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Actor instances matching the search criteria.")
    public Page<Actor> findActors(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Actors list");
        return actorService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Actor instances.")
    public Page<Actor> getActors(Pageable pageable) {
        LOGGER.debug("Rendering Actors list");
        return actorService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/filmActors", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the filmActors instance associated with the given id.")
    public Page<FilmActor> findAssociatedfilmActors(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated filmActors");
        return filmActorService.findAssociatedValues(id, "actor", "actorId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setActorService(ActorService service) {
        this.actorService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Actor instance.")
    public Actor createActor(@RequestBody Actor instance) {
        LOGGER.debug("Create Actor with information: {}", instance);
        instance = actorService.create(instance);
        LOGGER.debug("Created Actor with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Actor instances.")
    public Long countAllActors() {
        LOGGER.debug("counting Actors");
        Long count = actorService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Actor instance associated with the given id.")
    public Actor getActor(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Actor with id: {}", id);
        Actor instance = actorService.findById(id);
        LOGGER.debug("Actor details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Actor instance associated with the given id.")
    public Actor editActor(@PathVariable(value = "id") Integer id, @RequestBody Actor instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Actor with id: {}", instance.getActorId());
        instance.setActorId(id);
        instance = actorService.update(instance);
        LOGGER.debug("Actor details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Actor instance associated with the given id.")
    public boolean deleteActor(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Actor with id: {}", id);
        Actor deleted = actorService.delete(id);
        return deleted != null;
    }
}
