/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testdb_hsql.rolodex.service.CustomerService;
import com.testdb_hsql.rolodex.service.InventoryService;
import com.testdb_hsql.rolodex.service.StoreService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.testdb_hsql.rolodex.*;
import com.testdb_hsql.rolodex.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Store.
 * @see com.testdb_hsql.rolodex.Store
 */
@RestController(value = "Rolodex.StoreController")
@RequestMapping("/rolodex/Store")
@Api(description = "Exposes APIs to work with Store resource.", value = "StoreController")
public class StoreController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StoreController.class);

    @Autowired
    @Qualifier("rolodex.StoreService")
    private StoreService storeService;

    @Autowired
    @Qualifier("rolodex.CustomerService")
    private CustomerService customerService;

    @Autowired
    @Qualifier("rolodex.InventoryService")
    private InventoryService inventoryService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Store instances matching the search criteria.")
    public Page<Store> findStores(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Stores list");
        return storeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Store instances.")
    public Page<Store> getStores(Pageable pageable) {
        LOGGER.debug("Rendering Stores list");
        return storeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/inventories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inventories instance associated with the given id.")
    public Page<Inventory> findAssociatedinventories(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated inventories");
        return inventoryService.findAssociatedValues(id, "store", "storeId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/customers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the customers instance associated with the given id.")
    public Page<Customer> findAssociatedcustomers(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated customers");
        return customerService.findAssociatedValues(id, "store", "storeId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStoreService(StoreService service) {
        this.storeService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Store instance.")
    public Store createStore(@RequestBody Store instance) {
        LOGGER.debug("Create Store with information: {}", instance);
        instance = storeService.create(instance);
        LOGGER.debug("Created Store with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Store instances.")
    public Long countAllStores() {
        LOGGER.debug("counting Stores");
        Long count = storeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Store instance associated with the given id.")
    public Store getStore(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Store with id: {}", id);
        Store instance = storeService.findById(id);
        LOGGER.debug("Store details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Store instance associated with the given id.")
    public Store editStore(@PathVariable(value = "id") Integer id, @RequestBody Store instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Store with id: {}", instance.getStoreId());
        instance.setStoreId(id);
        instance = storeService.update(instance);
        LOGGER.debug("Store details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Store instance associated with the given id.")
    public boolean deleteStore(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Store with id: {}", id);
        Store deleted = storeService.delete(id);
        return deleted != null;
    }
}
