/*Generated by WaveMaker Studio*/

package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testdb_hsql.rolodex.*;

/**
 * Service object for domain model class Actor.
 * @see com.testdb_hsql.rolodex.Actor
 */

public interface ActorService {
   /**
	 * Creates a new actor.
	 * 
	 * @param created
	 *            The information of the created actor.
	 * @return The created actor.
	 */
	public Actor create(Actor created);

	/**
	 * Deletes a actor.
	 * 
	 * @param actorId
	 *            The id of the deleted actor.
	 * @return The deleted actor.
	 * @throws EntityNotFoundException
	 *             if no actor is found with the given id.
	 */
	public Actor delete(Integer actorId) throws EntityNotFoundException;

	/**
	 * Finds all actors.
	 * 
	 * @return A list of actors.
	 */
	public Page<Actor> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Actor> findAll(Pageable pageable);
	
	/**
	 * Finds actor by id.
	 * 
	 * @param id
	 *            The id of the wanted actor.
	 * @return The found actor. If no actor is found, this method returns
	 *         null.
	 */
	public Actor findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a actor.
	 * 
	 * @param updated
	 *            The information of the updated actor.
	 * @return The updated actor.
	 * @throws EntityNotFoundException
	 *             if no actor is found with given id.
	 */
	public Actor update(Actor updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the actors in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the actor.
	 */

	public long countAll();


    public Page<Actor> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

