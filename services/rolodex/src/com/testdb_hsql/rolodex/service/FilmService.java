/*Generated by WaveMaker Studio*/

package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testdb_hsql.rolodex.*;

/**
 * Service object for domain model class Film.
 * @see com.testdb_hsql.rolodex.Film
 */

public interface FilmService {
   /**
	 * Creates a new film.
	 * 
	 * @param created
	 *            The information of the created film.
	 * @return The created film.
	 */
	public Film create(Film created);

	/**
	 * Deletes a film.
	 * 
	 * @param filmId
	 *            The id of the deleted film.
	 * @return The deleted film.
	 * @throws EntityNotFoundException
	 *             if no film is found with the given id.
	 */
	public Film delete(Integer filmId) throws EntityNotFoundException;

	/**
	 * Finds all films.
	 * 
	 * @return A list of films.
	 */
	public Page<Film> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Film> findAll(Pageable pageable);
	
	/**
	 * Finds film by id.
	 * 
	 * @param id
	 *            The id of the wanted film.
	 * @return The found film. If no film is found, this method returns
	 *         null.
	 */
	public Film findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a film.
	 * 
	 * @param updated
	 *            The information of the updated film.
	 * @return The updated film.
	 * @throws EntityNotFoundException
	 *             if no film is found with given id.
	 */
	public Film update(Film updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the films in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the film.
	 */

	public long countAll();


    public Page<Film> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

