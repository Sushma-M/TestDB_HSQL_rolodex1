/*Generated by WaveMaker Studio*/

package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testdb_hsql.rolodex.*;


/**
 * ServiceImpl object for domain model class FilmActor.
 * @see com.testdb_hsql.rolodex.FilmActor
 */
@Service("rolodex.FilmActorService")
public class FilmActorServiceImpl implements FilmActorService {


    private static final Logger LOGGER = LoggerFactory.getLogger(FilmActorServiceImpl.class);

    @Autowired
    @Qualifier("rolodex.FilmActorDao")
    private WMGenericDao<FilmActor, FilmActorId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<FilmActor, FilmActorId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rolodexTransactionManager")
     public Page<FilmActor> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rolodexTransactionManager")
    @Override
    public FilmActor create(FilmActor filmactor) {
        LOGGER.debug("Creating a new filmactor with information: {}" , filmactor);
        return this.wmGenericDao.create(filmactor);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
    @Override
    public FilmActor delete(FilmActorId filmactorId) throws EntityNotFoundException {
        LOGGER.debug("Deleting filmactor with id: {}" , filmactorId);
        FilmActor deleted = this.wmGenericDao.findById(filmactorId);
        if (deleted == null) {
            LOGGER.debug("No filmactor found with id: {}" , filmactorId);
            throw new EntityNotFoundException(String.valueOf(filmactorId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<FilmActor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all filmactors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<FilmActor> findAll(Pageable pageable) {
        LOGGER.debug("Finding all filmactors");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public FilmActor findById(FilmActorId id) throws EntityNotFoundException {
        LOGGER.debug("Finding filmactor by id: {}" , id);
        FilmActor filmactor=this.wmGenericDao.findById(id);
        if(filmactor==null){
            LOGGER.debug("No filmactor found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return filmactor;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
    @Override
    public FilmActor update(FilmActor updated) throws EntityNotFoundException {
        LOGGER.debug("Updating filmactor with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((FilmActorId)updated.getId());
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


